// Latihan 4: Implementasi Merge Sort untuk Class Mahasiswa
class Mahasiswa implements Comparable<Mahasiswa> {
  String nrp;
  String nama;

  Mahasiswa(this.nrp, this.nama);

  @override
  String toString() {
    return '$nrp - $nama';
  }

  @override
  int compareTo(Mahasiswa other) {
    // Implementasi perbandingan berdasarkan NRP
    return this.nrp.compareTo(other.nrp);
  }
}

class LatihanMergeSort {
  // Fungsi Merge Sort untuk membagi dan mengurutkan array
  static void mergeSort<T extends Comparable<T>>(List<T> arr, int l, int r) {
    if (l < r) {
      int mid = (l + r) ~/ 2;
      mergeSort(arr, l, mid);  // Rekursi pada bagian kiri
      mergeSort(arr, mid + 1, r);  // Rekursi pada bagian kanan
      merge(arr, l, mid, r);  // Gabungkan hasil dari kedua subarray
    }
  }

  // Fungsi untuk menggabungkan dua subarray yang telah diurutkan
  static void merge<T extends Comparable<T>>(List<T> arr, int left, int mid, int right) {
    List<T> temp = List.from(arr);  // Salinan array untuk penggabungan
    int i = left, j = mid + 1, k = left;

    // Proses penggabungan dua subarray yang sudah terurut
    while (i <= mid && j <= right) {
      if (arr[i].compareTo(arr[j]) <= 0) {
        temp[k] = arr[i];
        i++;
      } else {
        temp[k] = arr[j];
        j++;
      }
      k++;
    }

    // Menyalin elemen yang tersisa dari subarray kiri (jika ada)
    while (i <= mid) {
      temp[k] = arr[i];
      i++;
      k++;
    }

    // Menyalin elemen yang tersisa dari subarray kanan (jika ada)
    while (j <= right) {
      temp[k] = arr[j];
      j++;
      k++;
    }

    // Menyalin kembali elemen yang telah digabungkan ke array asal
    for (int m = left; m <= right; m++) {
      arr[m] = temp[m];
    }
  }

  // Fungsi untuk menampilkan array
  static void tampil<T>(List<T> data) {
    for (T objek in data) {
      print(objek);
    }
    print('');
  }
}

void main() {
  List<Mahasiswa> arr8 = [
    Mahasiswa("02", "Budi"),
    Mahasiswa("01", "Andi"),
    Mahasiswa("04", "Udin"),
    Mahasiswa("03", "Candra")
  ];

  print("Data sebelum sorting:");
  LatihanMergeSort.tampil(arr8);

  // Proses Merge Sort
  DateTime startTime = DateTime.now();
  LatihanMergeSort.mergeSort(arr8, 0, arr8.length - 1);
  Duration elapsedTime = DateTime.now().difference(startTime);

  print("\nSetelah Merge Sort:");
  LatihanMergeSort.tampil(arr8);
  print("Waktu eksekusi Merge Sort: ${elapsedTime.inMilliseconds} ms\n");
}
