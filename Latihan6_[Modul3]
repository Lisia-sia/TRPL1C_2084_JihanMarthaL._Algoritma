import 'dart:math';
import 'dart:io';

// Implementasi algoritma sorting

void insertionSort(List<int> arr) {
  for (int i = 1; i < arr.length; i++) {
    int key = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = key;
  }
}

void selectionSort(List<int> arr) {
  for (int i = 0; i < arr.length - 1; i++) {
    int minIdx = i;
    for (int j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[minIdx]) {
        minIdx = j;
      }
    }
    int temp = arr[minIdx];
    arr[minIdx] = arr[i];
    arr[i] = temp;
  }
}

void bubbleSort(List<int> arr) {
  int n = arr.length;
  for (int i = 0; i < n - 1; i++) {
    for (int j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
}

void shellSort(List<int> arr) {
  int n = arr.length;
  for (int gap = n ~/ 2; gap > 0; gap ~/= 2) {
    for (int i = gap; i < n; i++) {
      int temp = arr[i];
      int j;
      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
        arr[j] = arr[j - gap];
      }
      arr[j] = temp;
    }
  }
}

List<int> quickSort(List<int> arr) {
  if (arr.length <= 1) return arr;
  int pivot = arr[arr.length ~/ 2];
  List<int> left = arr.where((x) => x < pivot).toList();
  List<int> middle = arr.where((x) => x == pivot).toList();
  List<int> right = arr.where((x) => x > pivot).toList();
  return [...quickSort(left), ...middle, ...quickSort(right)];
}

void mergeSort(List<int> arr) {
  if (arr.length <= 1) return;
  int mid = arr.length ~/ 2;
  List<int> left = arr.sublist(0, mid);
  List<int> right = arr.sublist(mid);
  mergeSort(left);
  mergeSort(right);
  merge(arr, left, right);
}

void merge(List<int> arr, List<int> left, List<int> right) {
  int i = 0, j = 0, k = 0;
  while (i < left.length && j < right.length) {
    if (left[i] <= right[j]) {
      arr[k++] = left[i++];
    } else {
      arr[k++] = right[j++];
    }
  }
  while (i < left.length) {
    arr[k++] = left[i++];
  }
  while (j < right.length) {
    arr[k++] = right[j++];
  }
}

// Fungsi untuk menampilkan semua data tanpa batasan
void printData(String label, List<int> arr) {
  print('$label:');
  print(arr);
}

// Fungsi untuk menyimpan data ke file
void saveToFile(String filename, List<int> data) {
  File file = File(filename);
  file.writeAsStringSync(data.join(', '));
  print('Hasil disimpan ke file: $filename');
}

// Fungsi untuk mengukur waktu eksekusi sorting
double measureTime(Function sortFunction, List<int> data, String algoName, {bool printResult = false}) {
  List<int> arr = List.from(data); // Salin data agar tidak merusak data asli
  Stopwatch stopwatch = Stopwatch()..start();
  if (sortFunction == quickSort) {
    List<int> sorted = sortFunction(arr);
    arr.clear();
    arr.addAll(sorted);
  } else {
    sortFunction(arr);
  }
  stopwatch.stop();

  if (printResult) {
    printData('Hasil Sorting ($algoName)', arr);
    saveToFile('hasil_sorting_${algoName}_${data.length}.txt', arr);
  }

  return stopwatch.elapsedMilliseconds / 1000.0; // Waktu dalam detik
}

void main() {
  List<int> dataSizes = [50000, 100000, 150000, 200000, 250000, 300000, 350000, 400000, 450000, 500000];

  for (var size in dataSizes) {
    List<int> data = List.generate(size, (index) => Random().nextInt(1000000));

    print('=======================================');
    print('Jumlah Data: $size');
    printData('Data Sebelum Sorting', data);
    saveToFile('data_sebelum_sorting_$size.txt', data);

    print('Insertion Sort: ${measureTime(insertionSort, data, 'Insertion', printResult: true)} detik');
    print('Selection Sort: ${measureTime(selectionSort, data, 'Selection', printResult: true)} detik');
    print('Bubble Sort: ${measureTime(bubbleSort, data, 'Bubble', printResult: true)} detik');
    print('Shell Sort: ${measureTime(shellSort, data, 'Shell', printResult: true)} detik');
    print('Quick Sort: ${measureTime(quickSort, data, 'Quick', printResult: true)} detik');
    print('Merge Sort: ${measureTime(mergeSort, data, 'Merge', printResult: true)} detik');

    Map<String, double> times = {
      'Insertion Sort': measureTime(insertionSort, data, 'Insertion', printResult: true),
      'Selection Sort': measureTime(selectionSort, data, 'Selection', printResult: true),
      'Bubble Sort': measureTime(bubbleSort, data, 'Bubble', printResult: true),
      'Shell Sort': measureTime(shellSort, data, 'Shell', printResult: true),
      'Quick Sort': measureTime(quickSort, data, 'Quick', printResult: true),
      'Merge Sort': measureTime(mergeSort, data, 'Merge', printResult: true),
    };

    print('\nRekap Waktu Eksekusi untuk $size data:');
    times.forEach((key, value) {
      print('$key: $value detik');
    });

    print('=======================================\n');
  }
}
